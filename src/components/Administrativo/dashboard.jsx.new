"use client"

import { useState } from "react"
import { useNavigate } from "react-router-dom"
import { useTheme } from "../../context/ThemeContext"

/* ── Componentes compartidos ─ */
import Sidebar            from "../Docente/components/Sidebar"
import LogoutConfirmModal from "../Docente/components/LogoutConfirmModal"

/* ── Componentes propios ──── */
import MainContent          from "./components/MainContent"
import ReviewSolicitudModal from "./components/ReviewSolicitudModal"
import ReviewReporteModal   from "./components/ReviewReporteModal"

export default function AdminDashboard({ setIsAuthenticated }) {
  /* ------------- UI general ------------- */
  const navigate = useNavigate()
  const { darkMode } = useTheme();
  const [activeSection, setActiveSection] = useState("Comisiones")      // "Comisiones" | "Reportes"
  const tabsComisiones = ["Pendientes", "Aprobadas", "Rechazadas", "Devueltas"]
  const tabsReportes   = ["Pendientes", "Aprobados", "Rechazados", "Devueltos"]
  const [activeTabComisiones, setActiveTabComisiones] = useState("Pendientes")
  const [activeTabReportes,   setActiveTabReportes]   = useState("Pendientes")
  const [sidebarOpen, setSidebarOpen] = useState(false)
  const [showLogout,  setShowLogout]  = useState(false)

  /* ------------- COMISIONES ------------- */
  const [solicitudesPorTab, setSolicitudesPorTab] = useState({
    Pendientes: [
      {
        titulo    : "Congreso Nacional de Ingeniería",
        solicitante: "María Pérez",
        tipoParticipacion: "Ponente",
        fechaSalida : "2025-07-02",
        fechaRegreso: "2025-07-06",
        ciudad : "Monterrey",
        pais   : "México",
        status : "En revisión"
      }
    ],
    Aprobadas: [],
    Rechazadas: [],
    Devueltas : []
  })
  const [modalSolicitud, setModalSolicitud] = useState(null) // { tab, index, solicitud }

  const handleReviewSolicitud = (tab, index, solicitud) =>
    setModalSolicitud({ tab, index, solicitud: { ...solicitud } })

  const moveSolicitud = (from, to, index, extra = {}) => {
    setSolicitudesPorTab(prev => {
      const nuevasSolicitudes = { ...prev }
      const solicitud = { ...nuevasSolicitudes[from][index], ...extra }
      nuevasSolicitudes[from] = nuevasSolicitudes[from].filter((_, i) => i !== index)
      nuevasSolicitudes[to] = [...nuevasSolicitudes[to], solicitud]
      return nuevasSolicitudes
    })
  }
  
  /* ------------- REPORTES ------------- */
  const [reportesPorTab, setReportesPorTab] = useState({
    Pendientes: [{
      titulo: "Reporte Congreso Nacional de Ingeniería",
      solicitante: "María Pérez",
      fechaEntrega: "2025-07-15",
      status: "En revisión"
    }],
    Aprobados: [],
    Rechazados: [],
    Devueltos: []
  })
  const [modalReporte, setModalReporte] = useState(null) // { tab, index, reporte }

  const handleReviewReporte = (tab, index, reporte) =>
    setModalReporte({ tab, index, reporte: { ...reporte } })

  const moveReporte = (from, to, index, extra = {}) => {
    setReportesPorTab(prev => {
      const nuevosReportes = { ...prev }
      const reporte = { ...nuevosReportes[from][index], ...extra }
      nuevosReportes[from] = nuevosReportes[from].filter((_, i) => i !== index)
      nuevosReportes[to] = [...nuevosReportes[to], reporte]
      return nuevosReportes
    })
  }

  /* ------------- Handlers ------------- */
  const handleApprobarSolicitud = () => {
    const { tab, index } = modalSolicitud
    moveSolicitud(tab, "Aprobadas", index, { status: "Aprobada" })
    setModalSolicitud(null)
  }

  const handleRechazarSolicitud = () => {
    const { tab, index } = modalSolicitud
    moveSolicitud(tab, "Rechazadas", index, { status: "Rechazada" })
    setModalSolicitud(null)
  }

  const handleDevolverSolicitud = () => {
    const { tab, index } = modalSolicitud
    moveSolicitud(tab, "Devueltas", index, { status: "Devuelta" })
    setModalSolicitud(null)
  }

  const handleApprobarReporte = () => {
    const { tab, index } = modalReporte
    moveReporte(tab, "Aprobados", index, { status: "Aprobado" })
    setModalReporte(null)
  }

  const handleRechazarReporte = () => {
    const { tab, index } = modalReporte
    moveReporte(tab, "Rechazados", index, { status: "Rechazado" })
    setModalReporte(null)
  }
  
  const handleDevolverReporte = () => {
    const { tab, index } = modalReporte
    moveReporte(tab, "Devueltos", index, { status: "Devuelto" })
    setActiveTabReportes("Devueltos")
  }

  /* ------------- Auxiliares UI ------------- */
  const toggleSidebar   = () => setSidebarOpen(!sidebarOpen)
  const showLogoutModal = () => setShowLogout(true)
  const hideLogoutModal = () => setShowLogout(false)
  
  const handleLogout = () => {
    // Si está en modo oscuro, lo cambiamos a modo claro antes de cerrar sesión
    if (darkMode) {
      document.documentElement.classList.remove('dark');
      localStorage.setItem('darkMode', 'false');
    }
    setIsAuthenticated(false)
    navigate("/login")
  }
  
  /* Listas visibles */
  const solicitudesActivas = solicitudesPorTab[activeTabComisiones] || []
  const reportesActivos    = reportesPorTab[activeTabReportes]     || []

  /* ------------- Render ------------- */
  return (
    <div className={`flex h-screen w-full font-sans overflow-hidden ${darkMode ? 'bg-gray-900' : 'bg-white'}`}>
      <Sidebar
        activeSection={activeSection}
        setActiveSection={setActiveSection}
        sidebarOpen={sidebarOpen}
        toggleSidebar={toggleSidebar}
        confirmLogout={showLogoutModal}
      />

      <MainContent 
        darkMode={darkMode}
        activeSection={activeSection}
        activeTabComisiones={activeTabComisiones}
        setActiveTabComisiones={setActiveTabComisiones}
        activeTabReportes={activeTabReportes}
        setActiveTabReportes={setActiveTabReportes}
        solicitudesActivas={solicitudesActivas}
        reportesActivos={reportesActivos}
        handleReviewSolicitud={handleReviewSolicitud}
        handleReviewReporte={handleReviewReporte}
        sidebarOpen={sidebarOpen}
      />

      {/* Modal de revisión de solicitud */}
      {modalSolicitud && (
        <ReviewSolicitudModal
          solicitud={modalSolicitud.solicitud}
          cerrar={() => setModalSolicitud(null)}
          aprobar={handleApprobarSolicitud}
          rechazar={handleRechazarSolicitud}
          devolver={handleDevolverSolicitud}
        />
      )}

      {/* Modal de revisión de reporte */}
      {modalReporte && (
        <ReviewReporteModal
          reporte={modalReporte.reporte}
          cerrar={() => setModalReporte(null)}
          aprobar={handleApprobarReporte}
          rechazar={handleRechazarReporte}
          devolver={handleDevolverReporte}
        />
      )}

      {/* Modal de confirmación de logout */}
      <LogoutConfirmModal
        showLogoutConfirm={showLogout}
        cancelLogout={hideLogoutModal}
        handleLogout={handleLogout}
      />
    </div>
  )
}
